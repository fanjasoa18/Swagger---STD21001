openapi: 3.0.1
info:
  title: STD21001
  description: 'Hello World!'
  version: 1.0.0
servers:
- url: https://std21001.com
tags:
- name: Students
- name: Courses
paths:
  /students:
    get:
      tags:
      - Students
      summary: Get all students
      operationId: getAllStudents #appel
      description: 'Get all students with details'
      parameters:
      - name: page
        in: query
        schema:
          type: integer
      - name: page_size
        in: query
        required: true
        schema:
          type: integer
      responses:
        200:
          description: List of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        400:
          description: Bad request

    post:
      tags:
      - Students
      summary: Create new students
      operationId: createNewStudents
      description: Create new students from an array
      requestBody:
        description: Students to be created
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateStudent'
      responses:
        200:
          description: List of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        400:
          description: Bad request
    put:
      tags:
      - Students
      summary: Update all informations about a student
      operationId: UpdatingStudent
      description: Update existing student
      requestBody:
        description: Student to be changed
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateStudent'
      responses:
          200:
            description: student Updated
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/CreateStudent'
          400:
            description: Bad request
    patch:
      tags:
      - Students
      summary: Update information about a student (partiel)
      operationId: UpdatingStudent
      description: Update existing student
      requestBody:
        description: Student to be changed
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateStudent'
      responses:
          200:
            description: student Updated
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/CreateStudent'
          400:
            description: Bad request

  /students{id}:
      get: 
        tags:
          - Students
        summary: Get a student by identifier
        parameters:
          - name: id
            in: path
            required: true
            schema: 
              type: integer
        responses:
          200:
            description: the student
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/CreateStudent'

          400:
            description: Bad request
      delete:
        tags:
          - Students
        summary: delete a student by identifier
        operationId: delete a student
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
        responses:
          200:
            description: Ressource deleted
            content: {}
          401:
            description: Unauthorized 

  /courses:
      get:
        tags:
          - Courses
        summary: Get All Courses
        operationId: Get all Courses
        parameters:
          - name: page
            in: query
            schema:
              type: integer
          - name: page_size
            in: query
            required: true
            schema:
              type: integer
        responses:
          200:
            description: List of courses
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Courses'
          400:
            description: Bad request 
      post:
        tags:
          - Courses
        summary: Create new courses
        operationId: createNew
        description: Create new courses from an array
        requestBody:
          description: Course to be created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courses'
        responses:
          200:
            description: new course
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Courses'
          400:
            description: Bad request
      put:
        tags:
          - Courses
        summary: Update course
        operationId: UpdateCourse
        description: Update all info about course
        requestBody:
          description: change the course
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courses'
        responses:
          200:
            description: All info to be changed
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Courses'
          400:
            description: Bad request
      patch:
        tags:
          - Courses
        summary: Update info about course
        operationId: UpdateCourse
        description: Update info about course(partiel)
        requestBody:
          description: change the course
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courses'
        responses:
          200:
            description: Info to be changed
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Courses'
          400:
            description: Bad request
  /courses/{id}:
      get:
        tags:
          - Courses
        summary: Get a course by identifier
        parameters:
          - name: id
            in: path
            required: true
            schema: 
              type: integer
        responses:
          200:
            description: the course
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Courses'

          400:
            description: Bad request
      delete:
        tags:
          - Courses
        summary: Delete a course by identifier
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
        responses:
          200:
            description: Ressource deleted
            content: {}
          403:
            description: Forbidden 

components:
  schemas:
    Student:
      allOf:
        - $ref: '#/components/schemas/CreateStudent'
      type: object
      properties:
        id:
          type: integer
          example: 10
    CreateStudent:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: "Rakoto"
        birth_date:
          type: string
          format: date
          example: "2022-01-01"

    Courses:
      allOf:
      - $ref: '#/components/schemas/Courses'
      type: object
      properties:
        id:
          type: integer
          example: 10
        code:
          type: string
          example: PROG1
        name:
          type: string
          example: Algorithme
        teacher:
          type: string
          example: Mr Tokimahery
        created_date:
          type: string
          format: date
          example: "2022-01-01"
        
        
      
  